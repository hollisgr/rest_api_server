definitions:
  dto.WebUserAuth:
    properties:
      login:
        example: login
        maxLength: 20
        minLength: 5
        type: string
      password:
        example: password
        maxLength: 20
        minLength: 5
        type: string
    required:
    - login
    - password
    type: object
  dto.WebUserCreate:
    properties:
      email:
        example: example@email.com
        type: string
      first_name:
        example: first_name
        maxLength: 20
        minLength: 5
        type: string
      login:
        example: login
        maxLength: 20
        minLength: 5
        type: string
      password:
        example: password
        maxLength: 20
        minLength: 5
        type: string
      second_name:
        example: second_name
        maxLength: 20
        minLength: 5
        type: string
    required:
    - email
    - first_name
    - login
    - password
    - second_name
    type: object
  dto.WebUserLoad:
    properties:
      email:
        example: example@email.com
        type: string
      first_name:
        example: first_name
        maxLength: 20
        minLength: 5
        type: string
      id:
        minimum: 0
        type: integer
      login:
        example: login
        maxLength: 20
        minLength: 5
        type: string
      second_name:
        example: second_name
        maxLength: 20
        minLength: 5
        type: string
    required:
    - email
    - first_name
    - login
    - second_name
    type: object
  handler.Err:
    properties:
      message:
        example: message text
        type: string
      status:
        example: status text
        type: string
      success:
        example: false
        type: boolean
    type: object
  handler.Msg:
    properties:
      message:
        example: message text
        type: string
      status:
        example: status text
        type: string
      success:
        example: true
        type: boolean
    type: object
  handler.UpdateUserResp:
    properties:
      success:
        example: true
        type: boolean
      user:
        $ref: '#/definitions/dto.WebUserLoad'
    type: object
  handler.UserLoadResp:
    properties:
      success:
        example: true
        type: boolean
      user:
        $ref: '#/definitions/dto.WebUserLoad'
    type: object
info:
  contact: {}
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: auth user by login and password
      parameters:
      - description: Account data
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.WebUserAuth'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Msg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Err'
      summary: Authentification
  /users:
    get:
      description: List of all users
      parameters:
      - description: user jwt token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Msg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Err'
      summary: User list
      tags:
      - protected
    post:
      consumes:
      - application/json
      description: creating user using data
      parameters:
      - description: User create data
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.WebUserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Msg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Err'
      summary: Create New User
  /users/:id:
    delete:
      description: Delete user by id
      parameters:
      - description: user jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Msg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Err'
      summary: Delete user by id
      tags:
      - protected
    get:
      description: User data by id
      parameters:
      - description: user jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.UserLoadResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Err'
      summary: User by id
      tags:
      - protected
    patch:
      description: Update user data by id
      parameters:
      - description: user jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.UpdateUserResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Err'
      summary: Update user by id
      tags:
      - protected
swagger: "2.0"
